// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: log.proto

package logcollection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogService_SubmitLog_FullMethodName  = "/logcollection.LogService/SubmitLog"
	LogService_SubmitLogs_FullMethodName = "/logcollection.LogService/SubmitLogs"
)

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	SubmitLog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*SubmitLogResponse, error)
	SubmitLogs(ctx context.Context, opts ...grpc.CallOption) (LogService_SubmitLogsClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) SubmitLog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*SubmitLogResponse, error) {
	out := new(SubmitLogResponse)
	err := c.cc.Invoke(ctx, LogService_SubmitLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) SubmitLogs(ctx context.Context, opts ...grpc.CallOption) (LogService_SubmitLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], LogService_SubmitLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceSubmitLogsClient{stream}
	return x, nil
}

type LogService_SubmitLogsClient interface {
	Send(*LogEntry) error
	CloseAndRecv() (*SubmitLogsResponse, error)
	grpc.ClientStream
}

type logServiceSubmitLogsClient struct {
	grpc.ClientStream
}

func (x *logServiceSubmitLogsClient) Send(m *LogEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceSubmitLogsClient) CloseAndRecv() (*SubmitLogsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SubmitLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	SubmitLog(context.Context, *LogEntry) (*SubmitLogResponse, error)
	SubmitLogs(LogService_SubmitLogsServer) error
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) SubmitLog(context.Context, *LogEntry) (*SubmitLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitLog not implemented")
}
func (UnimplementedLogServiceServer) SubmitLogs(LogService_SubmitLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitLogs not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_SubmitLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SubmitLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_SubmitLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SubmitLog(ctx, req.(*LogEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_SubmitLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).SubmitLogs(&logServiceSubmitLogsServer{stream})
}

type LogService_SubmitLogsServer interface {
	SendAndClose(*SubmitLogsResponse) error
	Recv() (*LogEntry, error)
	grpc.ServerStream
}

type logServiceSubmitLogsServer struct {
	grpc.ServerStream
}

func (x *logServiceSubmitLogsServer) SendAndClose(m *SubmitLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceSubmitLogsServer) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logcollection.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitLog",
			Handler:    _LogService_SubmitLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitLogs",
			Handler:       _LogService_SubmitLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "log.proto",
}
